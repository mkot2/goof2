# This starter workflow is for a CMake project running on a single platform.
# There is a different starter workflow if you need cross-platform coverage.
# See:
# https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
---
name: CMake with prebuilt artifacts

"on":
  push:
    branches: ["main"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  # Explicitly use GCC to avoid MSVC-specific issues
  CC: gcc
  CXX: g++

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        simd: [sse2, avx2]
    runs-on: ${{ matrix.os }}
    env:
      SIMD: ${{ matrix.simd }}
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v5

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: >-
            ${{ runner.os }}-${{ matrix.simd }}-ccache-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.simd }}-ccache-

      - name: Install ccache (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y ccache

      - name: Install Valgrind (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y valgrind

      - name: Setup MSYS2 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: |
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-make
            mingw-w64-x86_64-ccache
          path-type: inherit

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DCMAKE_C_COMPILER=${{env.CC}} \
            -DCMAKE_CXX_COMPILER=${{env.CXX}} \
            -DCMAKE_C_FLAGS="-m${{env.SIMD}}" \
            -DCMAKE_CXX_FLAGS="-m${{env.SIMD}}" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DCMAKE_C_COMPILER=${{env.CC}} \
            -DCMAKE_CXX_COMPILER=${{env.CXX}} \
            -DCMAKE_C_FLAGS="-m${{env.SIMD}}" \
            -DCMAKE_CXX_FLAGS="-m${{env.SIMD}}" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -G "MinGW Makefiles"
        shell: msys2 {0}

      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: cmake --build build --config ${{env.BUILD_TYPE}} --parallel

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: cmake --build build --config ${{env.BUILD_TYPE}} --parallel
        shell: msys2 {0}

      - name: Test (Linux)
        if: runner.os == 'Linux'
        working-directory: build
        run: ctest -C ${{env.BUILD_TYPE}} -j$(nproc) --output-on-failure

      - name: Memcheck with Valgrind (Linux)
        if: runner.os == 'Linux'
        run: cmake --build build --target memcheck

      - name: Test (Windows)
        if: runner.os == 'Windows'
        run: |
          cd build
          ctest -C ${{env.BUILD_TYPE}} -j$(nproc) --output-on-failure
        shell: msys2 {0}

      - name: Upload Linux artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: goof2-linux-${{ matrix.simd }}
          path: build/goof2

      - name: Upload Windows artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: goof2-windows-${{ matrix.simd }}
          path: build/goof2.exe
