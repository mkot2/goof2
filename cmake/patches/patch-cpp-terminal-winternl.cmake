# Apply the winternl.h include to cpp-terminal on Windows builds without Git.
# This script expects to run with working directory set to the cpp-terminal source dir.

set(_file "cpp-terminal/private/terminfo.cpp")
if(EXISTS "${_file}")
  file(READ "${_file}" _contents)
  # Repair any accidental corruption like "#en  #include <winternl.h>\n dif" -> "#endif"
  set(_before "${_contents}")
  string(REPLACE "#en  #include <winternl.h>\ndif" "#endif" _contents "${_contents}")
  if(NOT "${_before}" STREQUAL "${_contents}")
    file(WRITE "${_file}" "${_contents}")
    message(STATUS "cpp-terminal patch: repaired malformed #endif in terminfo.cpp")
  endif()
  string(FIND "${_contents}" "#include <winternl.h>" _already)
  if(_already GREATER_EQUAL 0)
    message(STATUS "cpp-terminal patch: winternl.h already present")
  else()
    # Insert winternl include after windows.h (preserve any leading spaces)
    string(REGEX REPLACE "(#.*include <windows\\.h>.*\\r?\\n)" "\\1  #include <winternl.h>\n" _patched "${_contents}")
    if(_patched STREQUAL "${_contents}")
      message(WARNING "cpp-terminal patch: windows.h include not found; no changes made")
    else()
      file(WRITE "${_file}" "${_patched}")
      message(STATUS "cpp-terminal patch: injected #include <winternl.h>")
    endif()
  endif()
else()
  message(WARNING "cpp-terminal patch: file not found: ${_file}")
endif()

# Also ensure CommandLineToArgvW is declared by including <shellapi.h>
set(_args_file "cpp-terminal/private/args.cpp")
if(EXISTS "${_args_file}")
  file(READ "${_args_file}" _args_contents)
  string(FIND "${_args_contents}" "#include <shellapi.h>" _has_shellapi)
  if(_has_shellapi GREATER_EQUAL 0)
    message(STATUS "cpp-terminal patch: shellapi.h already present in args.cpp")
  else()
    # Prefer to insert after processenv.h for stability
    set(_needle "#include <processenv.h>")
    string(FIND "${_args_contents}" "${_needle}" _pos)
    if(_pos GREATER_EQUAL 0)
      string(LENGTH "${_needle}" _nlen)
      string(LENGTH "${_args_contents}" _tot)
      math(EXPR _headlen "${_pos} + ${_nlen}")
      math(EXPR _taillen "${_tot} - ${_headlen}")
      string(SUBSTRING "${_args_contents}" 0 ${_headlen} _head)
      string(SUBSTRING "${_args_contents}" ${_headlen} ${_taillen} _tail)
      set(_new "${_head}\n  #include <shellapi.h>\n${_tail}")
      file(WRITE "${_args_file}" "${_new}")
      message(STATUS "cpp-terminal patch: injected #include <shellapi.h> after processenv.h in args.cpp")
    else()
      # Fallback: insert after windows.h
      set(_needle2 "#include <windows.h>")
      string(FIND "${_args_contents}" "${_needle2}" _pos2)
      if(_pos2 GREATER_EQUAL 0)
        string(LENGTH "${_needle2}" _nlen2)
        string(LENGTH "${_args_contents}" _tot2)
        math(EXPR _headlen2 "${_pos2} + ${_nlen2}")
        math(EXPR _taillen2 "${_tot2} - ${_headlen2}")
        string(SUBSTRING "${_args_contents}" 0 ${_headlen2} _head2)
        string(SUBSTRING "${_args_contents}" ${_headlen2} ${_taillen2} _tail2)
        set(_new2 "${_head2}\n  #include <shellapi.h>\n${_tail2}")
        file(WRITE "${_args_file}" "${_new2}")
        message(STATUS "cpp-terminal patch: injected #include <shellapi.h> after windows.h in args.cpp")
      else()
        message(WARNING "cpp-terminal patch: could not locate insertion point in args.cpp; no changes made")
      endif()
    endif()
  endif()
else()
  message(WARNING "cpp-terminal patch: file not found: ${_args_file}")
endif()
