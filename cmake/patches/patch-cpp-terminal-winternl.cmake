# Apply cpp-terminal patches when fetched or when vendored.
# - Fix Windows includes (winternl/shellapi) to avoid missing symbols.
# - Tweak upstream CMake to reduce warnings and speed builds (PCH + Unity).
# This script expects to run with working directory set to the cpp-terminal source dir.

# On non-Windows platforms the upstream sources build as-is, and attempting to
# inject Windows-specific headers can corrupt files. Bail out early when not
# building on Windows to avoid patching mistakes.
if(NOT WIN32)
  message(STATUS "cpp-terminal patch: skipping on non-Windows")
  return()
endif()

set(_file "cpp-terminal/private/terminfo.cpp")
if(EXISTS "${_file}")
  file(READ "${_file}" _contents)
  # Repair any accidental corruption like "#en  #include <winternl.h>\n dif" -> "#endif"
  set(_before "${_contents}")
  string(REPLACE "#en  #include <winternl.h>\ndif" "#endif" _contents "${_contents}")
  if(NOT "${_before}" STREQUAL "${_contents}")
    file(WRITE "${_file}" "${_contents}")
    message(STATUS "cpp-terminal patch: repaired malformed #endif in terminfo.cpp")
  endif()
  string(FIND "${_contents}" "#include <winternl.h>" _already)
  if(_already GREATER_EQUAL 0)
    message(STATUS "cpp-terminal patch: winternl.h already present")
  else()
    # Insert winternl include after windows.h (preserve any leading spaces)
    string(REGEX REPLACE "(#.*include <windows\\.h>.*\\r?\\n)" "\\1  #include <winternl.h>\n" _patched "${_contents}")
    if(_patched STREQUAL "${_contents}")
      message(WARNING "cpp-terminal patch: windows.h include not found; no changes made")
    else()
      file(WRITE "${_file}" "${_patched}")
      message(STATUS "cpp-terminal patch: injected #include <winternl.h>")
    endif()
  endif()
else()
  message(WARNING "cpp-terminal patch: file not found: ${_file}")
endif()

# Also ensure CommandLineToArgvW is declared by including <shellapi.h>
set(_args_file "cpp-terminal/private/args.cpp")
if(EXISTS "${_args_file}")
  file(READ "${_args_file}" _args_contents)
  string(FIND "${_args_contents}" "#include <shellapi.h>" _has_shellapi)
  if(_has_shellapi GREATER_EQUAL 0)
    message(STATUS "cpp-terminal patch: shellapi.h already present in args.cpp")
  else()
    # Prefer to insert after processenv.h for stability
    set(_needle "#include <processenv.h>")
    string(FIND "${_args_contents}" "${_needle}" _pos)
    if(_pos GREATER_EQUAL 0)
      string(LENGTH "${_needle}" _nlen)
      string(LENGTH "${_args_contents}" _tot)
      math(EXPR _headlen "${_pos} + ${_nlen}")
      math(EXPR _taillen "${_tot} - ${_headlen}")
      string(SUBSTRING "${_args_contents}" 0 ${_headlen} _head)
      string(SUBSTRING "${_args_contents}" ${_headlen} ${_taillen} _tail)
      set(_new "${_head}\n  #include <shellapi.h>\n${_tail}")
      file(WRITE "${_args_file}" "${_new}")
      message(STATUS "cpp-terminal patch: injected #include <shellapi.h> after processenv.h in args.cpp")
    else()
      # Fallback: insert after windows.h
      set(_needle2 "#include <windows.h>")
      string(FIND "${_args_contents}" "${_needle2}" _pos2)
      if(_pos2 GREATER_EQUAL 0)
        string(LENGTH "${_needle2}" _nlen2)
        string(LENGTH "${_args_contents}" _tot2)
        math(EXPR _headlen2 "${_pos2} + ${_nlen2}")
        math(EXPR _taillen2 "${_tot2} - ${_headlen2}")
        string(SUBSTRING "${_args_contents}" 0 ${_headlen2} _head2)
        string(SUBSTRING "${_args_contents}" ${_headlen2} ${_taillen2} _tail2)
        set(_new2 "${_head2}\n  #include <shellapi.h>\n${_tail2}")
        file(WRITE "${_args_file}" "${_new2}")
        message(STATUS "cpp-terminal patch: injected #include <shellapi.h> after windows.h in args.cpp")
      else()
        message(WARNING "cpp-terminal patch: could not locate insertion point in args.cpp; no changes made")
      endif()
    endif()
  endif()
else()
  message(WARNING "cpp-terminal patch: file not found: ${_args_file}")
endif()

# Silence MSVC-only pragma warnings for GCC/Clang by augmenting upstream Warnings.cmake
set(_warns "cmake/Warnings.cmake")
if(EXISTS "${_warns}")
  file(READ "${_warns}" _w)
  string(FIND "${_w}" "-Wno-unknown-pragmas" _has_no_unknown_pragmas)
  if(_has_no_unknown_pragmas EQUAL -1)
    file(APPEND "${_warns}" "\n# goof2 patch: silence MSVC-only pragmas under GCC/Clang\ntarget_compile_options(${PROJECT_NAME}Warnings INTERFACE \n  \"$<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wno-unknown-pragmas>\"\n)\n")
    message(STATUS "cpp-terminal patch: appended -Wno-unknown-pragmas to Warnings.cmake")
  else()
    message(STATUS "cpp-terminal patch: Warnings.cmake already silences unknown pragmas")
  endif()
else()
  message(WARNING "cpp-terminal patch: Warnings.cmake not found; skipping warnings tweak")
endif()

# Speed up cpp-terminal build: enable Unity for the target and add PCH
set(_ct_cmake "cpp-terminal/CMakeLists.txt")
if(EXISTS "${_ct_cmake}")
  file(READ "${_ct_cmake}" _ct)
  string(FIND "${_ct}" "goof2 patch: speed up build" _already_speed)
  if(_already_speed EQUAL -1)
    set(_append "\n# goof2 patch: speed up build\n# Precompile some common standard headers (avoid Windows headers to prevent macro collisions)\ntarget_precompile_headers(cpp-terminal PRIVATE <string> <vector> <string_view> <optional> <variant>)\n# Enable CMake Unity for faster compiles (batch common sources)\nset_property(TARGET cpp-terminal PROPERTY UNITY_BUILD ON)\nset_property(TARGET cpp-terminal PROPERTY UNITY_BUILD_BATCH_SIZE 8)\n")
    file(APPEND "${_ct_cmake}" "${_append}")
    message(STATUS "cpp-terminal patch: appended Unity build and PCH to cpp-terminal CMake")
  else()
    # If previous patch included Windows headers in PCH, rewrite to STL-only
    set(_pat "target_precompile_headers(cpp-terminal PRIVATE <windows.h> <shellapi.h> <winternl.h> <string> <vector> <string_view> <optional> <variant>)")
    set(_rep "target_precompile_headers(cpp-terminal PRIVATE <string> <vector> <string_view> <optional> <variant>)")
    string(REPLACE "${_pat}" "${_rep}" _ct2 "${_ct}")
    if(NOT "${_ct2}" STREQUAL "${_ct}")
      file(WRITE "${_ct_cmake}" "${_ct2}")
      message(STATUS "cpp-terminal patch: updated PCH to avoid Windows headers")
    else()
      message(STATUS "cpp-terminal patch: Unity/PCH tweaks already present")
    endif()
  endif()
else()
  message(WARNING "cpp-terminal patch: file not found: ${_ct_cmake}")
endif()
